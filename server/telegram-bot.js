// server/telegram-bot.js - Fixed Version
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
dotenv.config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const API_URL = process.env.API_URL || 'http://localhost:5000';
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME;

// Validation
if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN not set in environment variables');
  process.exit(1);
}

if (!BOT_USERNAME) {
  console.warn('‚ö†Ô∏è  TELEGRAM_BOT_USERNAME not set - bot link generation may not work');
}

// Initialize bot
const bot = new TelegramBot(BOT_TOKEN, { 
  polling: true,
  request: {
    agentOptions: {
      keepAlive: true,
      family: 4
    }
  }
});

console.log('ü§ñ Telegram bot started');
console.log(`üì° API URL: ${API_URL}`);
console.log(`üë§ Bot username: @${BOT_USERNAME || 'not set'}`);

// Helper: Send formatted message
async function sendMessage(chatId, text, options = {}) {
  try {
    return await bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...options
    });
  } catch (error) {
    console.error('Failed to send message:', error.message);
    try {
      return await bot.sendMessage(chatId, text.replace(/[*_`]/g, ''), options);
    } catch (fallbackError) {
      console.error('Fallback send also failed:', fallbackError.message);
    }
  }
}

// Helper: Get user info
function getUserInfo(user) {
  return {
    id: user.id,
    username: user.username || null,
    firstName: user.first_name || null,
    lastName: user.last_name || null,
    displayName: [user.first_name, user.last_name].filter(Boolean).join(' ') || user.username || `User${user.id}`
  };
}

// Helper: Get profile photo URL
async function getProfilePhotoUrl(userId) {
  try {
    const photos = await bot.getUserProfilePhotos(userId, { limit: 1 });
    if (photos.total_count > 0 && photos.photos[0] && photos.photos[0][0]) {
      const fileId = photos.photos[0][0].file_id;
      const file = await bot.getFile(fileId);
      return `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
    }
  } catch (error) {
    console.log(`Could not fetch profile photo for user ${userId}:`, error.message);
  }
  return null;
}

// Command: /start (without code)
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  const user = getUserInfo(msg.from);

  const welcomeMessage = `
üëã *–ü—Ä–∏–≤–µ—Ç, ${user.displayName}!*

–Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π ConstestGG.

*üîó –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:*

1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç ConstestGG
2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É: \`/start –ö–û–î\`

*–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è - –∫–æ–¥ —É–∂–µ –±—É–¥–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ!*

_–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è._

üí° *–ö–æ–º–∞–Ω–¥—ã:*
/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–º–æ—â—å
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
`;

  await sendMessage(chatId, welcomeMessage);
});

// Command: /start CODE (with verification code)
bot.onText(/^\/start\s+([A-Z0-9]{6})$/i, async (msg, match) => {
  const chatId = msg.chat.id;
  const verificationCode = match[1].trim().toUpperCase();
  const user = getUserInfo(msg.from);

  console.log(`üîç User @${user.username || user.id} attempting verification with code: ${verificationCode}`);

  const processingMsg = await sendMessage(
    chatId,
    '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...'
  );

  try {
    // Get profile photo
    const photoUrl = await getProfilePhotoUrl(user.id);

    // Construct full URL
    const webhookUrl = `${API_URL}/api/auth/telegram/webhook`;
    console.log(`üì§ Sending request to: ${webhookUrl}`);

    // Send verification to backend
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-telegram-bot-token': BOT_TOKEN
      },
      body: JSON.stringify({
        verificationCode,
        telegramId: user.id,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        photoUrl
      })
    });

    console.log(`üì• Response status: ${response.status} ${response.statusText}`);
    
    // Check content type before parsing
    const contentType = response.headers.get('content-type');
    console.log(`üìÑ Content-Type: ${contentType}`);

    // Delete processing message
    try {
      await bot.deleteMessage(chatId, processingMsg.message_id);
    } catch (e) {
      // Ignore if can't delete
    }

    // Handle non-JSON responses
    if (!contentType || !contentType.includes('application/json')) {
      const textResponse = await response.text();
      console.error('‚ùå Received non-JSON response:', textResponse.substring(0, 200));
      
      throw new Error(
        `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞. ` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${API_URL}`
      );
    }

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }

    // Success message
    await sendMessage(
      chatId,
      `‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*

üë§ Telegram: @${user.username || user.firstName}
üéÆ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ConstestGG

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –°—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–æ–≤
‚Ä¢ –¢—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö

–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç - –ø—Ä–∏–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ`
    );

    console.log(`‚úÖ Successfully linked @${user.username || user.id} with code ${verificationCode}`);

  } catch (error) {
    console.error('‚ùå Telegram linking error:', error);

    try {
      await bot.deleteMessage(chatId, processingMsg.message_id);
    } catch (e) {
      // Ignore
    }

    let errorMessage = '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n';

    if (error.message.includes('Invalid or expired')) {
      errorMessage += 
        '‚è±Ô∏è –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω.\n\n' +
        '‚úÖ *–†–µ—à–µ–Ω–∏–µ:*\n' +
        '1. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç\n' +
        '2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥\n' +
        '3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
    } else if (error.message.includes('already linked')) {
      errorMessage += 
        'üîó –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n' +
        '–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
    } else if (error.message.includes('—Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞') || error.message.includes('API —Å–µ—Ä–≤–µ—Ä')) {
      errorMessage += 
        'üîß *–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É*\n\n' +
        `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API —Å–µ—Ä–≤–µ—Ä–æ–º (${API_URL}).\n\n` +
        '**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n' +
        '‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω\n' +
        '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞\n' +
        '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else {
      errorMessage += 
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}\n\n` +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
    }

    await sendMessage(chatId, errorMessage);
  }
});

// Command: /help
bot.onText(/^\/help$/i, async (msg) => {
  const chatId = msg.chat.id;

  const helpMessage = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É ConstestGG*

*üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:*
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç ConstestGG
2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Epic Games
3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å
4. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/start –ö–û–î - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏ (—Å–∫–æ—Ä–æ)

*üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ
‚Ä¢ üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ üí≥ –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
‚Ä¢ üéÆ –ù–æ–≤–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

*‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ —Å–∞–π—Ç–µ ConstestGG.

_–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç._
`;

  await sendMessage(chatId, helpMessage);
});

// Command: /status
bot.onText(/^\/status$/i, async (msg) => {
  const chatId = msg.chat.id;
  
  await sendMessage(
    chatId,
    'üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏*\n\n' +
    '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n' +
    '–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.'
  );
});

// Handle invalid verification codes
bot.onText(/^\/start\s+([A-Z0-9]+)$/i, async (msg, match) => {
  if (match[1].length === 6) return;
  
  const chatId = msg.chat.id;
  
  await sendMessage(
    chatId,
    '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞*\n\n' +
    '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤.\n\n' +
    '–ü—Ä–∏–º–µ—Ä: `A3F9K2`\n\n' +
    '–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.'
  );
});

// Handle plain text (might be verification code)
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return;
  
  const text = msg.text?.trim();
  if (!text) return;
  
  if (/^[A-Z0-9]{6}$/i.test(text)) {
    const chatId = msg.chat.id;
    await sendMessage(
      chatId,
      'üí° *–ü–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!*\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n' +
      `\`/start ${text.toUpperCase()}\`\n\n` +
      '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è.'
    );
  }
});

// Handle polling errors
bot.on('polling_error', (error) => {
  console.error('‚ö†Ô∏è  Telegram polling error:', error.message);
  
  if (error.code === 'EFATAL') {
    console.error('Fatal polling error, exiting...');
    process.exit(1);
  }
});

bot.on('webhook_error', (error) => {
  console.error('‚ö†Ô∏è  Telegram webhook error:', error.message);
});

bot.on('error', (error) => {
  console.error('‚ö†Ô∏è  Telegram bot error:', error.message);
});

// Graceful shutdown
const shutdown = async () => {
  console.log('\nüõë Stopping Telegram bot...');
  try {
    await bot.stopPolling();
    console.log('‚úÖ Bot stopped gracefully');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error stopping bot:', error);
    process.exit(1);
  }
};

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ö†Ô∏è  Unhandled Rejection at:', promise, 'reason:', reason);
});

console.log('‚úÖ Bot is ready to receive messages');
console.log('üí¨ Waiting for user interactions...\n');

export function getTelegramBot() {
  return bot;
}

export async function sendNotification(chatId, message) {
  return await sendMessage(chatId, message);
}